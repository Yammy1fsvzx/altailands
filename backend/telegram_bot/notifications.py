from aiogram import Bot
from .config import config
import logging
import json

logger = logging.getLogger(__name__)

async def send_quiz_request_notification(bot: Bot, request_data: dict):
    try:
        answers_text = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤"
        if request_data.get('answers'):
            try:
                answers = request_data['answers']
                if isinstance(answers, str):
                    answers = json.loads(answers)
                answers_text = "\n".join([f"- {q}: {a}" for q, a in answers.items()])
            except:
                answers_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–æ–≤"

        text = f"""üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ –∫–≤–∏–∑–∞!

üìù –ò–º—è: {request_data.get('name')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request_data.get('phone')}
üìß Email: {request_data.get('email')}
üé≤ –ü—Ä–æ–º–æ–∫–æ–¥: {request_data.get('promo_code')}

üìã –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:
{answers_text}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        
        await bot.send_message(chat_id=config.admin_chat_id, text=text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –∏–∑ –∫–≤–∏–∑–∞ –æ—Ç {request_data.get('name')}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–≤–∏–∑–µ: {e}")
        raise

async def send_plot_request_notification(bot: Bot, request_data: dict):
    try:
        text = f"""üè† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!

üìù –ò–º—è: {request_data.get('name')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request_data.get('phone')}
üìß Email: {request_data.get('email')}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {request_data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        
        await bot.send_message(chat_id=config.admin_chat_id, text=text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –æ—Ç {request_data.get('name')}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ: {e}")
        raise

async def send_request_notification(bot: Bot, request_data: dict):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏"""
    try:
        if request_data.get('type') == 'quiz':
            await send_quiz_request_notification(bot, request_data)
        else:
            await send_plot_request_notification(bot, request_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise 